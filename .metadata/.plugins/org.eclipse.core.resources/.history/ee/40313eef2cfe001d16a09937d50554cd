#pragma once
#include "LCU_Mode/LCU_Mode.hpp"
#include "StateMachine/StateMachine.hpp"

namespace LCU{
	template<LCU::MASTER_MODE> class SpecificStateMachine;

	template<> class SpecificStateMachine<LPU_VALIDATION>{

	};

	template<> class SpecificStateMachine<TESTBENCH_1DOF>{

	};

	template<> class SpecificStateMachine<VEHICLE_5DOF>{
		StateMachine specific_state_machine;

	};
}

namespace LCU{
	template<LCU::MASTER_MODE> class GeneralStateMachine;

	template<> class GeneralStateMachine<LPU_VALIDATION>{

	};

	template<> class GeneralStateMachine<TESTBENCH_1DOF>{

	};

	template<> class GeneralStateMachine<VEHICLE_5DOF>{
		StateMachine general_state_machine;

		enum States{
			INITIAL,
			OPERATIONAL,
			FAULT
		};

		void init(){
			general_state_machine = {INITIAL};
			general_state_machine.add_state(OPERATIONAL);
			general_state_machine.add_state(FAULT);
		}

		void add_transitions(){

		}
	};
}


