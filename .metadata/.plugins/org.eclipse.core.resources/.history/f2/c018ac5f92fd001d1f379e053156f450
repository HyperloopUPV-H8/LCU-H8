#pragma once
#include "LCU_Mode/LCU_Mode.hpp"
#include "Protections/ProtectionManager.hpp"
namespace LCU{


	constexpr float max_persistent_current = 30;
	constexpr float current_frequency = 10000;
	constexpr float time_limit = 5;


	template<LCU::MASTER_MODE> class Data;

	template<> class Data<LPU_VALIDATION>{
	public:
	float coil_current_hems_1 = 0;
	float coil_current_hems_3 = 0;
	float coil_current_ems_1 = 0;
	float coil_current_ems_3  = 0;

	float coil_temp_1 = 0;
	float coil_temp_2 = 0;
	float coil_temp_3 = 0;
	float coil_temp_4 = 0;

	float lpu_temp_1 = 0;
	float lpu_temp_2 = 0;
	float lpu_temp_3 = 0;
	float lpu_temp_4 = 0;

	float batt_voltage_1 = 0;
	float batt_voltage_2 = 0;

	float airgaps[8] = {0.0};

	double reference_current_hems_1 = 0;
	double reference_current_hems_3 = 0;
	double reference_current_ems_1 = 0;
	double reference_current_ems_3 = 0;
	};

	template<> class Data<TESTBENCH_1DOF>{
	public:
	float coil_current = 0;

	float coil_temp = 0;

	float lpu_temp = 0;

	float batt_voltage = 0;

	float airgap = 0.0;

	double reference_current = 0;
	};

	template<> class Data<VEHICLE_5DOF>{
	public:
	float coil_current_hems_1 = 0;
	float coil_current_hems_3 = 0;
	float coil_current_ems_1 = 0;
	float coil_current_ems_3  = 0;

	float coil_temp_1 = 0;
	float coil_temp_2 = 0;
	float coil_temp_3 = 0;
	float coil_temp_4 = 0;

	float lpu_temp_1 = 0;
	float lpu_temp_2 = 0;
	float lpu_temp_3 = 0;
	float lpu_temp_4 = 0;

	float batt_voltage_1 = 0;
	float batt_voltage_2 = 0;

	float airgaps[8] = {0.0};

	float reference_currents[8] = {0.0};

	void add_protections(){
		add_protection(&coil_current_hems_1, Boundary<float, TIME_ACCUMULATION>(max_persistent_current,time_limit,frequeny), Boundary<float, OUT_OF_RANGE>(-40,40));
		add_protection(&coil_current_hems_3, Boundary<float, TIME_ACCUMULATION>(max_persistent_current, time_limit, frequency), Boundary<float, OUT_OF_RANGE>(-40,40));
		add_protection(&coil_current_ems_1, Boundary<float,OUT_OF_RANGE>(-25,25));
	}

	};
}
