#pragma once
#include "LCU_Actuators/LCU_Actuators.hpp"
#include "LCU_Data/LCU_Data.hpp"
#include "CurrentControl.hpp"

namespace LCU {
	class Control{
	public:
    	CurrentControl hems_2_current_control, hems_4_current_control, ems_2_current_control, ems_4_current_control;
    	float& hems_2_current, &hems_4_current, &ems_2_current, &ems_4_current;
    	Control(LCU::Actuators& actuators, LCU::Data& data): hems_1_current_control(actuators.HEMS_1,data.reference_currents[COIL_ID::HEMS_1]),
    			hems_3_current_control(actuators.HEMS_3, data.reference_currents[COIL_ID::HEMS_3]),
    			ems_1_current_control(actuators.EMS_1, data.reference_currents[COIL_ID::EMS_1]),
				ems_3_current_control(actuators.EMS_3, data.reference_currents[COIL_ID::EMS_3]),
    			position_control(data.airgaps, data.reference_currents),
				hems_1_current(data.coil_current_hems_1),
				hems_3_current(data.coil_current_hems_3),
				ems_1_current(data.coil_current_ems_1),
				ems_3_current(data.coil_current_ems_3)
    	{}
	};

    template<> class Control<LCU::MASTER_MODE::VEHICLE_5DOF>{
    public:
    	CurrentControl hems_1_current_control, hems_3_current_control, ems_1_current_control, ems_3_current_control;
    	float& hems_1_current, &hems_3_current, &ems_1_current, &ems_3_current;


    	Control(LCU::Actuators<VEHICLE_5DOF>& actuators, LCU::Data<VEHICLE_5DOF>& data): hems_1_current_control(actuators.HEMS_1,data.reference_currents[COIL_ID::HEMS_1]),
    			hems_3_current_control(actuators.HEMS_3, data.reference_currents[COIL_ID::HEMS_3]),
    			ems_1_current_control(actuators.EMS_1, data.reference_currents[COIL_ID::EMS_1]),
				ems_3_current_control(actuators.EMS_3, data.reference_currents[COIL_ID::EMS_3]),
    			position_control(data.airgaps, data.reference_currents),
				hems_1_current(data.coil_current_hems_1),
				hems_3_current(data.coil_current_hems_3),
				ems_1_current(data.coil_current_ems_1),
				ems_3_current(data.coil_current_ems_3)
    	{}

    	void set_z_reference(float new_reference){
    		position_control.set_z_reference(new_reference);
    	}

    	void execute_current_control(){
    		hems_1_current_control.control(hems_1_current);
    		hems_3_current_control.control(hems_3_current);
			ems_1_current_control.control(ems_1_current);
			ems_3_current_control.control(ems_3_current);
			hems_1_current_control.apply_control();
			hems_3_current_control.apply_control();
			ems_1_current_control.apply_control();
			ems_3_current_control.apply_control();
    	}

    	void execute_distance_control(){
    		position_control.control();
    	}

    	void stop(){
    		hems_1_current_control.half_bridge.turn_off();
    		hems_3_current_control.half_bridge.turn_off();
			ems_1_current_control.half_bridge.turn_off();
			ems_3_current_control.half_bridge.turn_off();
    	}

    	void reset(){
    		hems_1_current_control.reset();
    		hems_3_current_control.reset();
    		ems_1_current_control.reset();
    		ems_3_current_control.reset();
    		position_control.reset();
    		hems_1_current_control.half_bridge.turn_on();
    		hems_3_current_control.half_bridge.turn_on();
			ems_1_current_control.half_bridge.turn_on();
			ems_3_current_control.half_bridge.turn_on();
    	}
    };
}


